/**
* \file    ProtectionState_codes.h
* \brief   Коды отказов ГКЕН-Е.
* 
* \version 1.0.3
* \date    23-06-2019
* \author  Третьяков В.Ж., Годунок А.Н., Агулов М.А.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef ProtectionState_codesH
#define ProtectionState_codesH

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Тип отказа.
/// 
typedef enum {

    eGrPS_Main                     = 0x01,          ///< отказы компонента Main.h
    eGrPS_InterChannel             = 0x02,          ///< отказы компонента InterChannel.h
    eGrPS_CanDrv                   = 0x03,          ///< отказы драйвера модуля dsPIC30_CAN_driver.h
    
    /// \brief отказы драйвера модуля dsPIC30CanAck_driver.h с подтверждением обмена 
    /// 
    eGrPS_CanAckDrv                = 0x04,
    
    eGrPS_UartDrv                  = 0x05,         ///< отказы драйвера модуля dsPIC30_rs422.c
    eGrPS_BinIn                    = 0x06,         ///< отказы компонента \a BinIn
    eGrPS_AnalogInput              = 0x0B,         ///< отказы компонента AnalogInput.h
    eGrPS_AdcDrv                   = 0x0C,         ///< отказы драйвера модуля dsPIC30_ADC.h
    eGrPS_Eeprom                   = 0x0E,         ///< отказы драйвера Eeprom.h
    eGrPS_ControlMK                = 0x10,         ///< отказы компонента ControlMK.h
    eGrPS_ControlSupplyVoltage     = 0x11,         ///< отказы компонентов AnalogInput.h и AnalogMeasurement.h
    eGrPS_Rs422                    = 0x12,         ///< отказы компонентов Rs422.h
    eGrPS_BlockExch                = 0x13,         ///< отказы модуля BlockExch.h
    eGrPS_DeviceAddress            = 0x14,         ///< отказы модуля DeviceAddress.h
    eGrPS_RelayCtrl                = 0x15,         ///< отказы модуля RelayCtrl.h
    eGrPS_PowerSupplyControl       = 0x16,         ///< отказы модуля PowerSupplyControl.h
    eGrPS_Button                   = 0x17,         ///< отказы модуля Buttons.h
    eGrPS_Calibration              = 0x18,         ///< отказы компонентов AnalogInput.h, Calibration.h и Sheduler.h
    eGrPS_OverloadDetector         = 0x19,         ///< отказы модуля OverloadDetectorDelay.h
    eGrPS_ComplexFault             = 0x1A,         ///< отказы модуля deviceAddress.h
} ProtectionStateGroup;

//1****************************************************************************
/// \brief Идентификаторы отказа компонента Main.h
/// 
typedef enum {

    ePS_MainCheckInterrupt        = 0x01,           ///< ожидаемое прерывание произошло до вызова проверяющей функции
    ePS_MainCheckPhase0           = 0x02,           ///< ошибка сигнала временной синхронизации в фазе 0
    ePS_MainCheckPhase1           = 0x03,           ///< ошибка сигнала временной синхронизации в фазе 1
    
    /// \brief за период прерывания таймера не было изменения уровня сигнала от соседнего МК
    /// 
    ePS_MainCheckPeriodTimer      = 0x04,
    
    ePS_MainUnusedInterrupt       = 0x05,           ///< возникло неиспользуемое прерывание
    ePS_MainUnusedInterruptAlter  = 0x06,           ///< возникло неиспользуемое альтернативное прерывание
    ePS_MainResetSWR              = 0x07,           ///< сброс МК по команде программного сброса
    ePS_MainResetWDT              = 0x08,           ///< сброс МК по сторожевому таймеру
    ePS_MainResetIncorrect        = 0x09,           ///< сброс МК по другим некорректным причинам
    ePS_MainErrorBeginSynchro     = 0x0A,           ///< нет синхронизации МК по началу работы 
    ePS_MainErrorOverflowIntCnt   = 0x0B,           ///< переполнение счетчика прерываний 
    ePS_MainErrorOscillatorFail   = 0x0C,           ///< возникло прерывание OscillatorFail 
    ePS_MainSfrErrorCheckingInit  = 0x0D            ///< возникла ошибка организации потоков выполнения  
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер функции:
    //              1 - Main_initialization,
    //              2 - Main_checkingInitialisation
    // параметр 2 - проверяемое значение
    // параметр 3 - ожидаемое значение
    // параметр 4 - адрес SFR регистры, значение которого проверяется

}ProtectionStateMainId;

//2****************************************************************************
/// \brief Идентификаторы отказа компонента InterChannel.h
///
typedef enum {

    //*****************************************************************************
    ePS_IntChNoError        = 0x00,                ///< нет ошибки

    ePS_IntChIdError        = 0x01,                ///< указан неверный идентификатор параметра
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер функции:
    //              1  - setRemote,
    //              2  - setLocalAck,
    //              3  - synchronize,
    //              4  - setParamSettings
    //              5  - updateData
    //              6  - stateChanged
    //              7  - isHandling
    //              8  - isSynchronized
    //              9  - getData
    //              10 - InterChannel_getLocalData
    // параметр 2 - Идентификатор параметра
    // параметр 3 - Синхронизируемые данные
    // параметр 4 - 0
    //

    ePS_IntChScript         = 0x02,                ///< не выполнена настройка сценария синхронизации
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер функции:
    //              1 - setRemote,
    //              2 - setLocalAck,
    //              3 - synchronize,
    //              4 - setParamSettings
    //              5 - updateData
    //              6 - stateChanged
    // параметр 2 - Идентификатор параметра
    // параметр 3 - Синхронизируемые данные
    // параметр 4 - Номер сценария
    //
     
    ePS_IntChRemoteLocalScr = 0x03,                 ///< от соседнего канала принят параметр с локальным сценарием
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер функции 1 - setRemote, 2 - setLocalAck, 3 - synchronize
    // параметр 2 - Идентификатор параметра
    // параметр 3 - Синхронизируемые данные
    // параметр 4 - 0
    //

    ePS_IntChRepeat         = 0x04,                 ///< повторный запрос на синхронизацию параметра
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер функции 1 - setRemote, 2 - setLocalAck, 3 - synchronize
    // параметр 2 - Идентификатор параметра
    // параметр 3 - Синхронизируемые данные
    // параметр 4 - флаги
    //

    ePS_IntChTrError1       = 0x05,                 ///< ошибка при выполнении основного сценария передачи данных
     // При выполнении передачи был принят параметр от соседнего канала.
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - 0
    // параметр 3 - 0
    // параметр 4 - 0
    //
     
    ePS_IntChTrError2       = 0x06,                 ///< ошибка при выполнении альтернативного сценария передачи данных
    // При выполнении приема параметра поступил запрос на синхронизацию.
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - 0
    // параметр 3 - 0
    // параметр 4 - 0
    //

     ePS_IntChProcCheck      = 0x07,                 ///< неверно задана процедура контроля
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - идентификатор сценария синхронизации
    // параметр 3 - идентификатор процедуры контроля
    // параметр 4 - идентификатор процедуры синхронизации
    //

    ePS_IntChProcSync       = 0x08,                 ///< неверно задана процедура синхронизации
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - 0
    // параметр 3 - идентификатор процедуры контроля
    // параметр 4 - 0
    //

    ePS_IntChInputDriverGetError = 0x09,            ///< драйвер линии связи вернул неправильное количество байт
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер функции: 
    //              1 - runCommunication, 
    //              2 - setCommunicationData,
    //              2 - getCommunicationData
    // параметр 2 - количество прочитанных данных
    // параметр 3 - требуемое количество данных
    // параметр 4 - 0
    //

    ePS_IntChIoDriverError  = 0x0A,                 ///< не указан драйвер линии связи
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер функции: 1 - ctor, 2 - runCommunication
    // параметр 2 - идентификатор ошибочного указателя:
    //              1 - ошибка указателя данных драйвера; 
    //              2 - ошибка указателя таблицы функций драйвера;  
    //              3 - ошибка указателя на функцию isInReady; 
    //              4 - ошибка указателя на функцию get;
    //              5 - ошибка указателя на функцию isOutReady;
    //              6 - ошибка указателя на функцию set;
    //              7 - ошибка указателя на функцию run.
    // параметр 3 - 0
    // параметр 4 - 0
    //
    
    /// \brief превышено время ожидания параметров синхронизации от обоих каналов
    /// 
    ePS_IntChTime1Error     = 0x0B,
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - m_operatingValue
    // параметр 3 - m_remoteValue
    // параметр 4 - m_localValue
    //

    ePS_IntChTime2Error     = 0x0C,                 ///< превышено время формирования синхронизированного параметра
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - m_operatingValue
    // параметр 3 - m_remoteValue
    // параметр 4 - m_localValue
    //

    ePS_IntChTime3Error     = 0x0D,                    ///< период поступления запросов на синхронизацию нарушен
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - m_operatingValue
    // параметр 3 - m_remoteValue
    // параметр 4 - m_localValue
    //

    
    /// \brief при обработке контролируемых времен указан несуществующий индекс контролируемого времени
    /// 
    ePS_IntChConTimeIndexError   = 0x0E,
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - индекс контролируемого таймера 0, 1, 2
    // параметр 2 - количество контролируемых таймеров
    // параметр 3 - 0
    // параметр 4 - 0
    //

    /// \brief код зарезервирован
    /// 
    ePS_IntChReserved01        = 0x0F,
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - 0
    // параметр 2 - 0
    // параметр 3 - 0
    // параметр 4 - 0
    //

    /// \brief неправильное состояние флагов при обновлении данных по результатам синхронизации
    /// 
    ePS_IntChCollision        = 0x10,
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - флаги
    // параметр 3 - скрипт
    // параметр 4 - 0
    //

    ePS_IntChT1ValueError  = 0x11,                   ///< указано недопустимое значение Т1
    // Время Т1 контролируется только для сценария синхронизация параметра eScriptSync
    // и для этого сценария должно быть обязательно задано. Для других сценариев
    // время Т1 должно быть задано как ноль.
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор параметра
    // параметр 2 - сценарий синхронизации #InterChannelScript
    // параметр 3 - значение времени Т1
    // параметр 4 - 0
    //
}ProtectionStateInterChannelId;

//3****************************************************************************
/// \brief Идентификаторы отказа модуля драйвера \a CAN.
/// 
typedef enum {
    ePS_CanDrvNoError = 0,         ///< нет ошибки
    ePS_CanDrvBufSize = 1,         ///< размер буфера для чтения или для записи переданного в качестве 
                                   /// параметра, не совпадает с размером буфера драйвера
                                   // При отказе с этим идентификатором в черный ящик сохраняются 
                                   // следующие параметры:
                                   // параметр 1 - номер функции: 1 - _get, 2 - _set.
                                   // параметр 2 - размер буфера драйвера
                                   // параметр 3 - размер буфера для чтения или для записи переданного в качестве параметра.
                                   // параметр 4 - не используется
    ePS_CanDrvNumPort = 2,         ///< неправильно указан порт модуля \a CAN #eDsPIC30CanCount
    ePS_CanDrvSelf    = 3,         ///< неправильный указатель на структуру с данными драйвера
    ePS_CanDrvRx1Sid  = 4,         ///< в буфер 1 помещено принятое значение
                                   // При отказе с этим идентификатором в черный ящик сохраняются 
                                   // следующие параметры:
                                   // параметр 1 - содержимое регистра RX1CON
                                   // параметр 2 - содержимое регистра RX1SID
                                   // параметр 3 - содержимое регистра INTF
                                   // параметр 4 - идентификатор порта eDsPIC30Can1 или eDsPIC30Can2

    eDsPIC30CanErrorRx = 5,        ///< ошибка приема данных
                                   // При отказе с этим идентификатором в черный ящик сохраняются 
                                   // следующие параметры:
                                   // параметр 1 - содержимое регистра INTF
                                   // параметр 2 - 0
                                   // параметр 3 - 0
                                   // параметр 4 - 0

    eDsPIC30CanErrorTx = 6,        ///< ошибка передачи данных
                                   // При отказе с этим идентификатором в черный ящик сохраняются 
                                   // следующие параметры:
                                   // параметр 1 - содержимое регистра INTF
                                   // параметр 2 - состояние передатчика
                                   // параметр 3 - 0
                                   // параметр 4 - 0

    eDsPIC30CanSetMode = 7         ///< ошибка перехода в заданный режим
                                   // При отказе с этим идентификатором в черный ящик сохраняются 
                                   // следующие параметры:
                                   // параметр 1 - заданный режим
                                   // параметр 2 - режим в регистре контроллера CAN
                                   // параметр 3 - 0
                                   // параметр 4 - идентификатор порта eDsPIC30Can1 или eDsPIC30Can2  

}ProtectionStateCanDrvId;

//4****************************************************************************
/// \brief Идентификаторы отказа модуля драйвера \a CanAck с подтверждением обмена.
/// 
typedef enum {
    ePS_CanAckDrvNoError = 0,           ///< нет ошибки
    ePS_CanAckDrvBufSize = 1,           ///< массив, в который необходимо передать больше или меньше буфера передатчика
    ePS_CanAckDrvNumPort = 2,           ///< порт модуля \a CAN #eDsPIC30CanCount указан неправильно 
    ePS_CanAckDrvSelf    = 3,           ///< неправильный указатель на структуру с данными драйвера
    ePS_CanAckDrvRx1Sid  = 4,           ///< в буфер 1 помещено принятое значение
                                        // При отказе с этим идентификатором в черный ящик сохраняются 
                                        // следующие параметры:
                                        // параметр 1 - содержимое регистра RX1CON
                                        // параметр 2 - содержимое регистра RX1SID
                                        // параметр 3 - содержимое регистра INTF
                                        // параметр 4 - идентификатор порта eDsPIC30Can1 или eDsPIC30Can2

    eDsPIC30CanAckErrorRx = 5,          ///< ошибка приема данных
                                        // При отказе с этим идентификатором в черный ящик сохраняются 
                                        // следующие параметры:
                                        // параметр 1 - содержимое регистра INTF
                                        // параметр 2 - 0
                                        // параметр 3 - 0
                                        // параметр 4 - 0

    eDsPIC30CanAckErrorTx = 6,          ///< ошибка передачи данных
                                        // При отказе с этим идентификатором в черный ящик сохраняются 
                                        // следующие параметры:
                                        // параметр 1 - содержимое регистра INTF
                                        // параметр 2 - состояние передатчика
                                        // параметр 3 - 0
                                        // параметр 4 - 0

    eDsPIC30CanAckSetMode = 7,          ///< ошибка перехода в заданный режим
                                        // При отказе с этим идентификатором в черный ящик сохраняются 
                                        // следующие параметры:
                                        // параметр 1 - заданный режим
                                        // параметр 2 - режим в регистре контроллера CAN
                                        // параметр 3 - 0
                                        // параметр 4 - идентификатор порта eDsPIC30Can1 или eDsPIC30Can2

    /// \brief неправильно указан регистр порта ввода/вывода или номер вывода
    /// для формирования дополнительных подтверждений о приеме 
    /// 
    eDsPIC30CanAckReg = 8, 
                                        // При отказе с этим идентификатором в черный ящик сохраняются 
                                        // следующие параметры:
                                        // параметр 1 - указывает какие регистры указаны не правильно 1 - вывода, 2 - ввода
                                        // параметр 2 - регистр TRIS
                                        // параметр 3 - регистр PORT
                                        // параметр 4 - номер вывода

    eDsPIC30CanNotAck = 9,              ///< отсутствие подтверждения на передачу данных
                                        // При отказе с этим идентификатором в черный ящик сохраняются 
                                        // следующие параметры:
                                        // параметр 1 - 0
                                        // параметр 2 - 0
                                        // параметр 3 - 0
                                        // параметр 4 - 0

}ProtectionStateCanAckDrvId;

//5****************************************************************************
/// \brief Идентификаторы отказа модуля драйвера \a CAN с подтверждением обмена.
/// 
typedef enum {
    ePS_UartDrvNoError  = 0,           ///< нет ошибки
    ePS_UartDrvSfrError = 0xD,         ///< ошибка содержимого SFR регистра.
    // Данная ошибка возникает, когда после записи в SFR регистр значения из него было прочитано значение отличающиеся от записанного.
    // \note Биты, которые не доступны для записи или запись в них может привести к некорректному поведению, при подобных проверках игнорируются
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - Номер модуля UART:
    //              1 - UART1,
    //              2 - UART2;
    // параметр 2 - проверяемое значение;
    // параметр 3 - ожидаемое значение;
    // параметр 4 - адрес SFR регистры, значение которого проверяется.

}ProtectionStateUartDrvId;

//6****************************************************************************
/// \brief Идентификаторы отказа компонента BinIn.h
/// 
typedef enum {

    ePS_BinInErrorAlgorithmDecoder    = 1,  ///< ошибка при запросе к модулю BinInDecoder.h

    ePS_BinInErrorTestDecoder         = 2,  ///< неисправность тестирования дешифратора дискретных входов
                                            // При отказе с этим идентификатором в черный ящик сохраняются 
                                            // следующие параметры:
                                            // параметр 1 - состояние входов дешифратора
                                            // при тесте (инвертированное),
                                            // параметр 2 - эталонное состояние входов дешифратора
                                            // при тесте (инвертированное),
                                            // параметр 3 - 0,
                                            // параметр 4 - 0
                                            //

    ePS_BinInErrorRelayTest          = 3,   ///< неисправность тестирования реле
                                            // При отказе с этим идентификатором в черный ящик сохраняются 
                                            // следующие параметры:
                                            //

    ePS_BinInErrorDecoderAlgoritm    = 4,   ///< ошибка внутреннего алгоритма модуля BinInDecoder.h
                                            // При отказе с этим идентификатором в черный ящик сохраняются 
                                            // следующие параметры:
                                            // параметр 1 - значение переменной stateFunctionRead ,
                                            // параметр 2 - значение переменной ndxData,
                                            // параметр 3 - значение переменной ndxTest,
                                            // параметр 4 - значение переменной workingTimeRestriction
                                            //

    ePS_BinInErrorRelayAlgoritm      = 5    ///< ошибка внутреннего алгоритма модуля binInRelay.h
                                            // При отказе с этим идентификатором в черный ящик сохраняются 
                                            // следующие параметры:
                                            // параметр 1 - значение переменной stateFunctionRead ,
                                            // параметр 2 - значение переменной ndxData,
                                            // параметр 3 - значение переменной ndxTest,
                                            // параметр 4 - значение переменной workingTimeRestriction
                                            //

}ProtectionStateBinInId;

//11****************************************************************************
/// \brief Идентификаторы отказа компонента AnalogInput.h
/// 
typedef enum {

    ePS_AinErrorChannel    = 1,              ///< указан несуществующий идентификатор измерительного канала
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - Номер функции:
                                             //              1 - setChannelSettings,
                                             //              2 - AnalogInput_getData
                                             // параметр 2 - идентификатор измерительного канала
                                             // параметр 3 - 0
                                             // параметр 4 - 0
                                             //   

    ePS_AinErrorScript      = 2,             ///< указан несуществующий алгоритм дополнительной обработки сигнала
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - Номер функции:
                                             //              1 - setChannelSettings,
                                             //              2 - AnalogInput_getData
                                             //              3 - AnalogInput_run
                                             // параметр 2 - идентификатор измерительного канала
                                             // параметр 3 - идентификатор алгоритма дополнительной обработки сигнала 
                                             // параметр 4 - 0
                                             //

    ePS_AinErrorDriver  = 3,                 ///< не указан драйвер линии связи
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - Номер функции: 1 - ctor, 2 - runInterrupt
                                             // параметр 2 - идентификатор ошибочного указателя:
                                             //              1 - ошибка указателя данных драйвера; 
                                             //              2 - ошибка указателя таблицы функций драйвера;  
                                             //              3 - ошибка указателя на функцию isInReady; 
                                             //              4 - ошибка указателя на функцию get;
                                             //              5 - ошибка указателя на функцию isOutReady;
                                             //              6 - ошибка указателя на функцию set;
                                             //              7 - ошибка указателя на функцию run.
                                             // параметр 3 - 0
                                             // параметр 4 - 0
                                             //

    ePS_AinErrorDfId = 4,                    ///< указан несуществующий идентификатор фильтра
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - идентификатор фильтра
                                             // параметр 2 - частота пропускания
                                             // параметр 3 - номер функции:
                                             //              1 - DigitalFilter_run;
                                             //              2 - AnalogInput_setChannelSettings.
                                             // параметр 4 - 0.
                                             //

    ePS_AinErrorDfFreq = 5,                  ///< указана несуществующая частота пропускания
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - идентификатор фильтра
                                             // параметр 2 - частота пропускания
                                             // параметр 3 - 0
                                             // параметр 4 - 0
                                             //

    ePS_AinErrorDriverGet = 6,               ///< драйвер АЦП поместил в очередь больше значений, чем ожидалось
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - Номер функции:
                                             //              3 - AnalogInput_run; 
                                             // параметр 2 - количество данных, прочитанных из очереди
                                             // параметр 3 - ожидаемое количество данных
                                             // параметр 4 - 0
                                             //
   
}ProtectionStateAnalogInputId;

//12****************************************************************************
/// \brief Идентификаторы отказа модуля драйвера \a АЦП.
/// 
typedef enum {
    ePS_AdcDrvNoError  = 0,         ///< нет ошибки
    ePS_AdcDrvSetSize  = 1,         ///< массив, в который необходимо передать больше или меньше буфера передатчика
    ePS_AdcDoneError   = 2,         ///< отсутствует готовность АЦП
    ePS_AdcOverflow    = 3,         ///< очередь драйвера переполнилась
    ePS_AdcDrvSelf     = 4,         ///< неправильный указатель на структуру с данными драйвера
    ePS_AdcDrvSfrError = 0xD        ///< ошибка содержимого SFR регистра.
    // Данная ошибка возникает, когда после записи в SFR регистр значения из него было прочитано
    // значение отличающиеся от записанного.
    // \note Биты, которые не доступны для записи или запись в них может привести к 
    // некорректному поведению, при подобных проверках игнорируются
    // При отказе с этим идентификатором в черный ящик сохраняются 
    // следующие параметры:
    // параметр 1 - идентификатор функции:
    //              1 - Adc_ctor,
    //              2 - Adc_sfrInitTest;
    //              3 - Adc_sfrBufRegTest;
    // параметр 2 - проверяемое значение;
    // параметр 3 - ожидаемое значение;
    // параметр 4 - адрес SFR регистры, значение которого проверяется.
}ProtectionStateAdcDrvId;

//14****************************************************************************
/// \brief Идентификаторы отказа драйвера Eeprom.h.
/// 
typedef enum {
    ePS_EepromAccess        = 1,    ///< не завершена предыдущая операция с \a EEPROM
    ePS_EepromAccessSynchro = 2,    ///< не завершена предыдущая операция синхронизации данных
    ePS_EepromAddress       = 3     ///< ошибка адреса \a EEPROM
}ProtectionStateEepromId;

//16****************************************************************************
/// \brief Идентификаторы отказа компонента ControlMK.h.
/// 
typedef enum {
     
    ePS_ControlMkFault           = 0,        ///< ошибка при проверке МК (синхронизированные результаты)

    ePS_ControlMkFaultROM        = 1,        ///< ошибка контрольной суммы ПЗУ
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - подсчитанное значение контрольной суммы ПЗУ,
                                             // параметр 2 - эталонное значение контрольной суммы ПЗУ,
                                             // параметр 3 - 0,
                                             // параметр 4 - 0.
                                             //

    ePS_ControlMkFaultRAM        = 2,        ///< ошибка контрольной суммы ОЗУ
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - 0,
                                             // параметр 2 - 0,
                                             // параметр 3 - 0,
                                             // параметр 4 - 0.
                                             //

    ePS_ControlMkFaultTMR1       = 3,        ///< ошибка регистров \a TMR1
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - = 1 - регистр TxCON, = 2 - регистр PRx,
                                             // параметр 2 - значение регистра,
                                             // параметр 3 - эталонное значение регистра,
                                             // параметр 4 - 0.
                                             //

    ePS_ControlMkFaultTMR3       = 4,        ///< ошибка регистров \a TMR3
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - = 1 - регистр TxCON, = 2 - регистр PRx,
                                             // параметр 2 - значение регистра,
                                             // параметр 3 - эталонное значение регистра,
                                             // параметр 4 - 0.
                                             //

    ePS_ControlMkFaultCallFunctions = 5,     ///< ошибка при контроле вызовов функций
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение счетчика вызовов функций,
                                             // параметр 2 - эталонное значение счетчика вызовов функций,
                                             // параметр 3 - 0,
                                             // параметр 4 - 0.
                                             // 

    ePS_ControlMkFaultCPU     = 6,           ///< ошибка \a CPU
    ePS_ControlMkErrorIntNum  = 7            ///< ошибка счетчика состояния

}ProtectionStateControlMkId;

//17****************************************************************************
/// \brief Идентификаторы отказа компонента ControlSupplyVoltage.
/// 
typedef enum {

    ePS_FaultU5V       = 1,                  ///< ошибка при проверке питания 5 В
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - верхний допуск, %,
                                             // параметр 4 - нижний допуск, %.
                                             //

    ePS_FaultURef       = 2,                 ///< ошибка при проверке опорного питания АЦП
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - верхний допуск, %,
                                             // параметр 4 - нижний допуск, %.
                                             //

    ePS_FaultBufferADC    = 3,               ///< ошибка при проверке буферного регистра АЦП
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - маска сигнала,
                                             // параметр 4 - 0.
                                             //

    ePS_FaultOutputVoltage    = 4,           ///< ошибка при проверке напряжения выходного сигнала
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - допустимое отклонение,
                                             // параметр 4 - тип кадра сигнала.
                                             //
     
     ePS_FaultTestPulseOutputVoltage = 5,     ///< ошибка при проверке напряжения тестового импульса
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - допустимое отклонение,
                                             // параметр 4 - тип кадра сигнала.

     ePS_FaultTestPhaseError = 6  		     ///< ошибка контроля фазы выходного сигнала (фазовый демодулятор)
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - генерируемый код,
                                             // параметр 2 - генерируемое напряжение,
                                             // параметр 3 - уровень генерируемого сигнала,
											 // параметр 4 - тип кадра генерируемого сигнала
}ProtectionStateControlSupplyVoltageId;

//18****************************************************************************
/// \brief Отказы модуля обмена по интерфейсу RS-422.
/// 
typedef enum {
     ePS_Rs422StepCntError  = 1,        ///< ошибка счетчика состояния
     ePS_Rs422TimeOutError  = 2,        ///< ошибка таймаута
     ePS_Rs422SettingsError = 3         ///< ошибки установок параметров
}ProtectionStateRs422; 

//19****************************************************************************
/// \brief Отказы модуля BlockExch.h
/// 
typedef enum {    
    ePS_BlockExchErrorDataLength = 1,        ///< неправильно задана длина данных обмена 
    ePS_BlockExchErrorReceive    = 2,        ///< ошибка синхронизации принимаемых данных
    ePS_BlockExchErrorStartSync  = 3         ///< ошибка начальной синхронизации 
} ProtectionStateBlockExch;

//20****************************************************************************
/// \brief Отказы модуля DeviceAddress.h
/// 
typedef enum {
    ePS_DeviceAddressFirstCheckError = 1,         ///< ошибка при первой проверке перемычек
    ePS_DeviceAddressCheckError      = 2,         ///< ошибка при периодической проверке перемычек
    ePS_DeviceAddressStepCntError    = 3          ///< ошибка переменной состояния 
} ProtectionStateDeviceAddress;

//21****************************************************************************
/// \brief Отказы модуля RelayCtrl.h
/// 
typedef enum {
    ePS_RelayCtrlTstBurError = 1                  ///< неисправность функционирования БУР
} ProtectionStateRelayCtrl;

//22****************************************************************************
/// \brief Отказы модуля PowerSupplyControl.h
/// 
typedef enum {
    
    /// \brief отсутствует выходное напряжение блока питания силовой части
    /// 
    ePS_PowerSupplyControl_OutputVoltageFault = 1,

    /// \brief ошибка при контроле датчика напряжения блока питания силовой части 
    /// 
    ePS_PowerSupplyControl_SensorTestFault    = 2, 

    /// \brief ошибка динамического тестирования состояния датчика напряжения блока питания силовой части
    /// 
    ePS_PowerSupplyControl_DynamicTestFault   = 3, 

    /// \brief ошибка работы автомата проверки исправности источника питания (функция #supplyTest )
    /// 
    ePS_PowerSupplyControl_InvalidStateFSM    = 4

} ProtectionStatePowerSupplyControl;

//23****************************************************************************
/// \brief Отказы модуля Buttons.h
/// 
typedef enum {
    ePS_Button_HoldTimeExceed = 1                           ///< одна из кнопок нажата более 90 с
} ProtectionStateButton;

//24****************************************************************************
/// \brief Идентификаторы ошибок модуля "Калибровка". 
/// 
typedef enum {
    ePS_CalibrationSuccessful           = 1,        ///< калибровка выполнена успешно
    ePS_CalibrationBadStartCondition    = 2,        ///< условия входа в режим калибровки не выполнены
    ePS_CalibrationBreak                = 3,        ///< режим калибровки прерван
    ePS_CalibrationVoltageError         = 4,        ///< измеряемое напряжение вне допустимого диапазона
    ePS_CalibrationEepromError          = 5,        ///< несовпадение калибровочных коэффициентов, записанных в EEPROM
} ProtectionStateCalibration;

//25****************************************************************************
/// \brief Идентификаторы ошибок модуля определения перегрузки по току.
/// 
typedef enum {
     ePS_OverlDetSensorFault            = 1,    ///< неисправность датчика перегрузки
     ePS_OverlDetStateCntError          = 2     ///< ошибка счетчика состояния
} ProtStateOverlDetect;

//26 ***************************************************************************
/// \brief Идентификаторы ошибок группы \a eGrPS_ComplexFault - комплексные отказы.
/// 
typedef enum {
    
    /// \brief одновременный отказ РПВ и/или РШВ и несовпадение перемычек на кросс-плате
    /// 
     ePS_ReleysAndJumpersFault          = 1
     
} ComplexFault;
#endif

//*****************************************************************************
/**
* История изменений: 
* 
* Версия 1.0.1
* Дата   20-01-2016
* Автор  Третьяков В.Ж.
* 
* Изменения:
*     Базовая версия.
*
* Версия 1.0.2
* Дата   10-06-2019
* Автор  Годунок А.Н. 
*
* Изменения:
*     1) Добавлены новые коды защитных отказов для группы eGrPS_InterChannel;
*     2) Изменено описание назначения дополнительных параметров при отказе ePS_IntChProcCheck
*     группы eGrPS_InterChannel;
*     3) Добавлены новые коды защитных отказов для группы eGrPS_BinIn;
*     4) В группу отказов eGrPS_Main добавлен код отказа ePS_MainErrorCheckingInit;
*     5) Добавлена группа отказа eGrPS_UartDrv и для нее коды 
*
* Версия 1.0.3
* Дата   23-06-2019
* Автор  Агулов М.А. Годунок А.Н.
*
* Изменения:
*     1) Добавлен код отказа ePS_FaultTestPhaseError в группу eGrPS_ControlSupplyVoltage.
*     2) Наименование отказа ePS_CanDrvSetSize и ePS_CanAckDrvSetSize заменено 
*     на ePS_CanDrvBufSize и ePS_CanAckDrvBufSize.
*/
