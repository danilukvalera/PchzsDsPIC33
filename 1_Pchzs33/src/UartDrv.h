/**
* \file    UartDrv.h
* \brief   Драйвер модуля UART (Master) для МК dsPIC33
* \details Интерфейс
*
* \version 1.0.1
* \date    10-07-2019
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef UARTDRV_h
#define UARTDRV_h

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "IOports.h"
#include "MainRegisters.h"
//*****************************************************************************
// Объявление типов данных
//*****************************************************************************


//*****************************************************************************
/// \brief Номер модуля UART.
///
typedef enum
{
    eUART_module1 = 0,    ///< модуль МК UART1
    eUART_module2,        ///< модуль МК UART2
    eUART_module3,        ///< модуль МК UART3
    eUART_module4,        ///< модуль МК UART4
    eUART_moduleAmount    ///< количество доступных модулей UART
} eUART_modules;

//*****************************************************************************
/// \brief Количество бит данных и их контроль.
///
typedef enum
{
    eUART_8bit_parity_not  = 0,    ///< 8 бит, нет контроля по паритету
    eUART_8bit_parity_even = 1,    ///< 8 бит, контроль по четности
    eUART_8bit_parity_odd  = 2,    ///< 8 бит, контроль по нечетности
    eUART_9bit_parity_not  = 3     ///< 9 бит, нет контроля
} eUART_bitAndParity;

//*****************************************************************************
/// \brief Количество стоп бит.
///
typedef enum
{
    eUART_bitStop_1 = 0,    ///< 1 стоп бит
    eUART_bitStop_2 = 1     ///< 2 стоп бита
} eUART_bitStop;

//*****************************************************************************
/// \brief Тип скорости.
///
typedef enum
{
    eUART_speed_low  = 0,    ///< низкая скорость,  высчитывается как  Fcy / (16*( BRG + 1 ))
    eUART_speed_high = 1     ///< высокая скорость, высчитывается как  Fcy / ( 4*( BRG + 1 )) 
} eUART_speed;

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************

//*****************************************************************************
/// \brief Определение значения для регистра BRG при низкой скорости (определяет скорость обмена).
/// \param speed - скорость обмена, Бод.
///
//#define BRG_UART_LOW_SPEED( speed )  ( F_CY / ( 4 * speed ) - 1 )
#define BRG_UART_LOW_SPEED( speed )  ( F_CY / ( 16UL * speed ) - 1 )

//*****************************************************************************
/// \brief Определение значения для регистра BRG при высокой скорости (определяет скорость обмена).
/// \param speed - скорость обмена, Бод.
///
//#define BRG_UART_HIGH_SPEED( speed )  ( F_CY / ( 16 * speed ) - 1 )
#define BRG_UART_HIGH_SPEED( speed )  ( F_CY / ( 4UL * speed ) - 1 )

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Конструктор.
/// \param numberModule – номер модуля UART;
/// \param bitAndParity - количество бит данных и их контроль;
/// \param bitStop - количество стоп бит;
/// \param speed - тип скорости (высокая или низкая);
/// \param brg - делитель частоты Fcy, задает частоту шины.
/// \return Адрес драйвера, если 0 - то ошибка инициализации.
///
const void *UartDrv_ctor( eUART_modules      numberModule,  
                          eUART_bitAndParity bitAndParity,
                          eUART_bitStop      bitStop,  
                          eUART_speed        speed,
                          uint16_t           brg );

//*****************************************************************************
/// \brief Рабочий цикл обмена по UART.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор).
/// \note Пустая функция.
///
void UartDrv_run(const void *self);

//*****************************************************************************
/// \brief Чтение принятых данных по UART.
/// \param self  - указатель на данные объекта, который вернул конструктор.
/// \return Принятый байт данных.
///
uint8_t UartDrv_get( const void *self );
        
//*****************************************************************************
/// \brief Запуск передачи байта данных в UART.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор);
/// \param data – байт для передачи.
///
void UartDrv_set( const void *self, uint8_t data );

//*****************************************************************************
/// \brief Наличие принятых данных.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор).
/// \retval true - есть данные;
/// \retval false - нет данных.
///
bool UartDrv_isInReady(const void *self);

//*****************************************************************************
/// \brief Готовность к передаче данных.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор).
/// \retval true - есть готовность;
/// \retval false - нет готовности.
///
bool UartDrv_isOutReady(const void *self);

//*****************************************************************************
/// \brief Запрос результата операции по UART.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор).
/// \return Биты ошибок регистра статуса.
///
uint16_t UartDrv_getError(const void *self);

//*****************************************************************************
/// \brief Сброс модуля периферии UART.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void UartDrv_reset( const void *self );

//*****************************************************************************
/// \brief установка скорости обмена UART.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \param btr - скорость обмена
///
void UartDrv_setBtr( const void *self, uint32_t btr);

#endif

//*****************************************************************************
/**
* История изменений: 
*
* Версия 1.0.1
* Дата   10-07-2019
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Базовая версия.
*/
