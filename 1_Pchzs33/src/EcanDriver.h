/**
* \file    EcanDriver.h
* \brief   Драйвер модуля ECAN для МК dsPIC33
* \details Интерфейс
*
* \version 1.0.1
* \date    26-05-2017
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef ECANDRIVER_H
#define ECANDRIVER_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include "iodrv.h"

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************
//
//*****************************************************************************
/// \brief Номер модуля ECAN, с которым работает драйвер.
///
typedef enum EcanNumber_tag
{
    eEcan1    = 0,          ///< модуль МК ECAN1
    eEcan2,                 ///< модуль МК ECAN2
    eEcanCount              ///< количество доступных модулей ECAN
} EcanNumber;

//*****************************************************************************
/// \brief Режим работы модуля ECAN.
///
typedef enum EcanMode_tag
{
    eEcanModeNormal = 0,               ///< нормальный режим работы модуля ECAN
    eEcanModeConfig = 4                ///< режим настройки модуля ECAN
} EcanMode;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Конструктор.
/// \param numEcan – номер модуля ECAN, с которым работает драйвер; 
/// \param txSid – стандартный идентификатор ECAN для передаваемого пакета;
/// \param rxSid – стандартный идентификатор ECAN для принимаемого пакета;
/// \param mode - заданный режим работы модуля ECAN;
/// \param lengthPacket – длина пакета данных (должна быть четной и не более 8).
/// \return Указатель на структуру, описывающую состояние
/// данного драйвера.
/// \note Данный указатель должен передаваться в параметрах всем
/// другим функциям, выполняющим работу данного драйвера.
///
const void *Ecan_ctor( EcanNumber numEcan,
                      uint16_t txSid,
                      uint16_t rxSid,
                      uint16_t mode,
                      uint16_t lengthPacket, 
                      uint16_t tipeCAN );

//*****************************************************************************
/// \brief Чтение данных из периферийного устройства.
/// \param self  - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на массив передаваемых данных;
/// \param size  - длина массива.
/// \return Длину принятых данных, которые были помещены в массив \a array.
///
uint16_t Ecan_get( const void *self, uint8_t *array, uint16_t size);

//*****************************************************************************
/// \brief Чтение данных из периферийного устройства.
/// \param self  - указатель на данные объекта, который вернул конструктор;
/// \return SID принятых данных
///
uint16_t Ecan_getSID( const void *self);

//*****************************************************************************
/// \brief Готовность устройства к чтению принятых данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \retval true - устройство готово к считыванию данных;
/// \retval false - устройство не готово к считыванию данных.
///
bool Ecan_isInReady( const void *self );

//*****************************************************************************
/// \brief Передача данных драйверу для вывода.
/// \param self - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на данные, которые необходимо выдать;
/// \param size - размер массива данных.
///
void Ecan_set( const void *self, uint8_t *array, uint16_t size );

//*****************************************************************************
/// \brief Готовность устройства к выводу новых данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \retval true - устройство готово к выводу новых данных;
/// \retval false - устройство не готово к выводу новых данных.
///
bool Ecan_isOutReady( const void *self );

//*****************************************************************************
/// \brief Рабочий цикл.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void Ecan_run( const void *self );

//*****************************************************************************
/// \brief Сброс модуля периферии CAN.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \note Функция переводит контроллер CAN в режим конфигурации, а потом в режим,
/// заданный при вызове конструктора. 
///
void Ecan_reset( const void *self );

//*****************************************************************************
/// \brief Сброс операции передачи данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void Ecan_AbortTransmite( const void *self );

//*****************************************************************************
/// \brief Повторить операцию передачи данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void Ecan_startTransmite( const void *self );

//*****************************************************************************
/// \brief Запрос результата операции передачи.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \return Код ошибки операции передачи.
///
uint16_t Ecan_getError( const void *self );

//*****************************************************************************
/// \brief Запуск операции передачи.
/// \param self  - указатель на данные драйвера (адрес, который вернул конструктор);
/// \param array – указатель на адрес массива данных;
/// \param size  – длина массива данных.
/// \note Функция не задействована в алгоритме драйвера, ее вызов приведет к переходу в ЗС.
/// 
void Ecan_start( const void *self, uint8_t *array, uint16_t size );

#endif 

//*****************************************************************************
/**
* История изменений: 
*
* Версия 1.0.1
* Дата   26-05-2017
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Базовая версия.
*/
