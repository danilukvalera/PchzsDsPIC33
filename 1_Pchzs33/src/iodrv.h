/**
* \file    iodrv.h
* \brief   Интерфейсы драйверов
* \details Интерфейсы драйверов определяют структуры данных, которые содержат таблицы 
* вызовов функций драйверов и прототипы этих функций.
* \details Драйвера классифицируются по нескольким критериям:
* \details - в зависимости от набора функций в таблице вызовов;
* \details - в зависимости от прототипов функций, содержащихся в таблице вызовов.
*
* \details В зависимости от набора функций драйвера бывают:
* \details - ввода;
* \details - вывода;
* \details - ввода/вывода.
*
* \details В зависимости от прототипов функций драйвера отличаются набором параметров
* и типом этих параметров.
* \details Данный интерфейс описывает только различные таблицы вызовов. Данные, 
* специфические для работы драйвера, определяются при разработке 
* конкретного драйвера.
* 
* \version 3.0.1
* \date    04-04-2018
* \author  Годунок А.Н.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef IODRV_H
#define IODRV_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Типовые состояния драйверов.
///
typedef enum
{
    eDrvWorking = 0,                    ///< работает
    eDrvOk      = 1,                    ///< завершил работу по норме
    eDrvError   = 2                     ///< завершил работу с ошибкой
} eDrvStates;

//*****************************************************************************
/// \brief Типовые операции драйверов.
///
typedef enum
{
    eDrvOperationOut   = 0,                       ///< выдача (запись)
    eDrvOperationIn    = 1,                       ///< прием (чтение)
    eDrvOperationReset = 2                        ///< сброс
} eDrvOperation;

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для типа данных uint8_t.
/// \param self – указатель на объект, для работы с которым вызывается функция.
/// \return Данные, принятые драйвером.
///
typedef uint8_t( *pfUint8Get )( const void *self );

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для типа данных uint8_t.
/// \param self – указатель на объект, для работы с которым вызывается функция;
/// \param data – данные, передаваемые драйверу для дальнейшей обработки.
///
typedef void (*pfUint8Set )( const void *self, uint8_t data );

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для типа данных uint16_t.
/// \param self – указатель на объект, для работы с которым вызывается функция.
/// \return Данные, принятые драйвером.
///
typedef uint16_t( *pfUint16Get )( const void *self );

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для типа данных uint16_t.
/// \param self – указатель на объект, для работы с которым вызывается функция;
/// \param data – данные, передаваемые драйверу для дальнейшей обработки.
///
typedef void (*pfUint16Set )( const void *self, uint16_t data );

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для типа данных uint32_t.
/// \param self – указатель на объект, для работы с которым вызывается функция.
/// \return Данные, принятые драйвером.
///
typedef uint32_t( *pfUint32Get )( const void *self );

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для типа данных uint32_t.
/// \param self – указатель на объект, для работы с которым вызывается функция;
/// \param data – данные, передаваемые драйверу для дальнейшей обработки.
///
typedef void (*pfUint32Set )( const void *self, uint32_t data );

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для работы с массивами типа uint8_t.
/// \param self  – указатель на объект, для работы с которым вызывается функция;
/// \param array – указатель на массив, в который функция поместит данные, принятые драйвером;
/// \param size  – размер массива, в который функция поместит данные, принятые драйвером.
/// \return Количество байт, помещенных в массив \a array.
///
typedef uint16_t( *pfArrayGet )( const void *self, uint8_t *array, uint16_t size );

//*****************************************************************************
/// \brief Прототип функции чтения SID (из пакета данных CAN) из драйвера для работы с массивами типа uint8_t.
/// \param self  – указатель на объект, для работы с которым вызывается функция;
/// \param array – указатель на массив, в который функция поместит данные, принятые драйвером;
/// \param size  – размер массива, в который функция поместит данные, принятые драйвером.
/// \return Количество байт, помещенных в массив \a array.
///
typedef uint16_t( *pfUint16GetSid )( const void *self );             //vvv

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для работы с массивами типа uint8_t.
/// \param self  – указатель на объект, для работы с которым 
/// вызывается функция;
/// \param array – указатель на массив c данными, которые нужно передать
/// драйверу для обработки;
/// \param size  – количество байт, передаваемых драйверу для обработки.
/// \note Если количество данных, которые нужно обработать, превышает буфер 
/// драйвера, драйвер должен вызвать #sysAssertException с кодом группы 
/// отказа, соответствующем драйверу (компоненту), и кодом отказа #ePS_BufOverflow.
///
typedef void (*pfArraySet )( const void *self, uint8_t *array, uint16_t size );

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для типа данных bool.
/// \param self – указатель на объект, для работы с которым вызывается функция.
///
typedef bool (*pfBoolGet )( const void *self );

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для типа данных bool.
/// \param self – указатель на объект, для работы с которым вызывается функция;
/// \param data – данные, передаваемые драйверу для дальнейшей обработки.
///
typedef void (*pfBoolSet )( const void *self, bool data );

//*****************************************************************************
/// \brief Прототип функции, выполняющей код, но не возвращающей 
/// значения.
/// \param self – указатель на объект, для работы с которым 
/// вызывается функция.
///
typedef void (*pfVoid )( const void *self );

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для типа uint8_t.
///
typedef struct
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint8Get.
    /// 
    pfUint8Get get;

    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isInReady;

    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint8Set.
    /// 
    pfUint8Set set;

    /// \brief Готовность драйвера к приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isOutReady;
    
    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;

    ///// \brief Запуск операции в драйвере.
    ///// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    /////
    //pfUint8Set start;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} Uint8IoDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера вывода для типа uint16_t.
///
typedef struct
{
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    /// 
    pfUint16Set set;

    /// \brief Готовность драйвера к приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} Uint16OutDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для типа uint16_t.
///
typedef struct
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get get;

    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isInReady;

    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    /// 
    pfUint16Set set;

    /// \brief Готовность драйвера к приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isOutReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;

    /// \brief Запуск операции в драйвере.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfUint16Set start;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} Uint16IoDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода для типа uint32_t.
///
typedef struct
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    ///
    pfUint32Get get;

    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid run;

    /// \brief Запуск операции в драйвере.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfUint32Set start;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} Uint32InDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера вывода для типа uint32_t.
///
typedef struct
{
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    ///
    pfUint32Set set;

    /// \brief Готовность драйвера к приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid run;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} Uint32OutDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для типа uint32_t.
///
typedef struct
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    ///
    pfUint32Get get;

    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isInReady;

    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    ///
    pfUint32Set set;

    /// \brief Готовность драйвера к приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isOutReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid run;

    /// \brief Запуск операции в драйвере.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfUint32Set start;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} Uint32IoDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода для работы с массивами типа uint8_t.
///
typedef struct
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArrayGet.
    ///
    pfArrayGet get;

    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid run;

    /// \brief Запуск операции в драйвере.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfArraySet start;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} ArrayInDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера вывода для работы с массивами типа uint8_t.
///
typedef struct
{
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfArraySet set;

    /// \brief Готовность драйвера к приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid run;

    /// \brief Запуск операции в драйвере.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfArraySet start;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;

} ArrayOutDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для работы с массивами типа uint8_t.
///
typedef struct
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArrayGet.
    ///
    pfArrayGet get;

    /// \brief Готовность данных для чтения.
    /// \details Метод возвращает признак наличия данных готовых для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isInReady;

    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfArraySet set;

    /// \brief Готовность драйвера к приему новых данных.
    /// \note Метод возвращает признак наличия готовности драйвера к 
    /// приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \details Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    ///
    pfBoolGet isOutReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid run;

    /// \brief Запуск операции в драйвере.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    ///
    pfArraySet start;

    /// \brief Чтение кода ошибки из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get getError;

    /// \brief Сброс устройства.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    ///
    pfVoid reset;
    
    /// \brief Чтение SID из пакета данных CAN.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом pfUint16GetSid.
    /// 
    pfUint16GetSid getSID;


} ArrayIoDriver;

#endif

//*****************************************************************************
/**
* История изменений:
* 
* Версия 1.0.1
* Автор  Годунок А.Н.
*
* Изменения:
*    Базовая версия.
* 
* Версия 2.0.1
* Дата   27-11-2015
* Автор  Годунок А.Н.
*
* Изменения:
*    В версии 2.0.1 изменен подход к хранению таблицы функций драйвера. 
*    Из требований к безопасности, таблица функций, хранившаяся в структуре
*    данных драйвера, вынесена из этой структуры. 
*    Цель этих изменений: -  сделать возможным хранение таблицы вызовов в ПЗУ.
*    Это необходимо для того, чтобы избежать перехода программы в произвольную
*    область памяти в случае искажения данных в ОЗУ.
* 
* Версия 3.0.1
* Дата   04-04-2018
* Автор  Третьяков В.Ж.
* 
* Изменения:
*    В версии 3.0.1 добавлена функция драйвера getError - получить результат 
*    операции и start - запуск операции приема.
*    Во все структуры добавлена функция reset - сброс устройства.  
*    Структура ArrayIoDriverEx - удалена.
*/
