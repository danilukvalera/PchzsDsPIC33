//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef IOports_h
#define IOports_h

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <xc.h>
#include "templates.h"

//*****************************************************************************
// Глобальные константы, определенных через макросы
//*****************************************************************************

//*****************************************************************************
/// \brief Выход с закрытым коллектором.
///
#define OPEN_DRAIN_OFF 0

//*****************************************************************************
/// \brief Выход с открытым коллектором.
///
#define OPEN_DRAIN_ON  1

//*****************************************************************************
// Макросы типа функции
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация порта ввода-вывода на вывод.
/// \param reg - имя регистра; 
/// \param numberBit - номер бита в регистре;
/// \param openDrain -  если 1, то выход с открытым коллектором.
///
#define INIC_PORT_OUT(reg, numberBit, openDrain) do {      \
    SETBIT_REGISTER(LAT##reg, numberBit, 0);               \
    SETBIT_REGISTER(TRIS##reg, numberBit, 0);              \
    SETBIT_REGISTER(ODC##reg, numberBit, openDrain);       \
    CLEARBIT(ANSEL##reg, numberBit);                       \
    SETBIT_REGISTER(CNPU##reg, numberBit, 0);              \
    SETBIT_REGISTER(CNPD##reg, numberBit, 0);              \
} while (0)

//*****************************************************************************
/// \brief Инициализация порта ввода-вывода на ввод.
/// \param reg - имя регистра;
/// \param numberBit - номер бита в регистре;
/// \param full -  если 1, то с нагрузочным резистором.
///
#define INIC_PORT_IN(reg, numberBit, full) do {             \
    SETBIT_REGISTER(LAT##reg, numberBit, 0);                \
    SETBIT_REGISTER(TRIS##reg, numberBit, 1);               \
    SETBIT_REGISTER(ODC##reg, numberBit, eIO_openDrainOff); \
    CLEARBIT(ANSEL##reg, numberBit);                        \
    SETBIT_REGISTER(CNPU##reg, numberBit, 0);               \
    SETBIT_REGISTER(CNPD##reg, numberBit, 0);               \
    if (full == eIO_fullUp) {                               \
        SETBIT_REGISTER(CNPU##reg, numberBit, 1);           \
    } else {                                                \
        if (full == eIO_fullDown) {                         \
            SETBIT_REGISTER(CNPD##reg, numberBit, 1);       \
        }                                                   \
    }                                                       \
} while (0)

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Подключение порта ввода-вывода с открытым стоком.
///
typedef enum {
    eIO_openDrainOff = 0,        ///< выключено
    eIO_openDrainOn  = 1,        ///< включено
    eIO_openDrainAmount          ///< количество доступных значений
} eIO_openDrain;

//*****************************************************************************
/// \brief Подтяжка входа.
///
typedef enum {
    eIO_fullOff  = 0,        ///< выключена
    eIO_fullUp   = 1,        ///< к питанию
    eIO_fullDown = 2,        ///< к земле
    eIO_fullAmount           ///< количество доступных значений
} eIO_Pull;

#endif

//*****************************************************************************
/**
* Пояснения:
*    Для эффективной работы с битами нужно вводить Уровень Оптимизации 1-4
*          if(CHECKBIT(PORT, 0)              - 2 команд  МК 
*              SETBIT(PORT, 1);              - 1 команда МК
*              SETBIT(var, 1);               - 2 команд  МК
*              SETBIT(var.bp.b0, 1);         - 1 команда МК
*              if(CHECKBIT(var, 0) == 0)     - 3 команды  МК
*           if(var.bp.b0 == 0)               - 2 команды  МК
*    при 0 - очень рыхлый код 
*          if(CHECKBIT(PORTD, 0) - 5 команд  МК 
*          SETBIT(PORTD, 1);     - 3 команды МК
*/

//*****************************************************************************
